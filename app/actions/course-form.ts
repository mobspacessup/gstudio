"use server"

import { z } from "zod"

// Form validation schema
const CourseFormSchema = z.object({
  name: z.string().min(2, { message: "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞" }),
  email: z.string().email({ message: "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å" }),
  phone: z.string().min(6, { message: "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" }),
  courseId: z.string(),
  courseTitle: z.string(),
  timePreference: z.string().optional(),
  paymentMethod: z.string().optional(), // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
})

// Telegram bot configuration
const TELEGRAM_BOT_TOKEN = "7587937962:AAGlFzrR-x2Fb4QEtIWB86mAPenZV7ffyEo"
// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π ID —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
const TELEGRAM_CHAT_ID = "-1002592531264"

export async function submitCourseEnrollment(formData: FormData) {
  console.log("Course enrollment started")

  try {
    // Extract form data
    const data = {
      name: formData.get("name") as string,
      email: formData.get("email") as string,
      phone: formData.get("phone") as string,
      courseId: formData.get("courseId") as string,
      courseTitle: formData.get("courseTitle") as string,
      timePreference: formData.get("timePreference") as string,
      paymentMethod: formData.get("paymentMethod") as string, // –ü–æ–ª—É—á–∞–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
    }

    console.log("Course enrollment data:", data)

    // Validate form data
    const validatedData = CourseFormSchema.safeParse(data)

    if (!validatedData.success) {
      console.error("Validation error:", validatedData.error.flatten())
      return {
        success: false,
        message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã",
        errors: validatedData.error.flatten().fieldErrors,
      }
    }

    // Format message for Telegram
    let messageText = `
üéì *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫—É—Ä—Å*

üë§ *–ò–º—è*: ${data.name}
üìß *Email*: ${data.email}
üì± *–¢–µ–ª–µ—Ñ–æ–Ω*: ${data.phone}
üìö *–ö—É—Ä—Å*: ${data.courseTitle} (ID: ${data.courseId})
`

    // Add time preference if provided
    if (data.timePreference && data.timePreference !== "none") {
      messageText += `üïí *–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è*: ${data.timePreference}\n`
    }

    // Add payment method if provided
    if (data.paymentMethod) {
      messageText += `üí∞ *–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã*: ${data.paymentMethod}\n`
    }

    messageText += `\nüìÖ *–î–∞—Ç–∞*: ${new Date().toLocaleString("ru-RU")}`

    console.log("Sending to Telegram:", { chatId: TELEGRAM_CHAT_ID, messageLength: messageText.length })

    // Send message to Telegram
    const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`
    console.log("Telegram API URL:", telegramUrl)

    const telegramResponse = await fetch(telegramUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: messageText,
        parse_mode: "Markdown",
      }),
    })

    console.log("Telegram API response status:", telegramResponse.status)

    const telegramData = await telegramResponse.json()
    console.log("Telegram API response data:", telegramData)

    if (!telegramResponse.ok) {
      console.error("Telegram API error:", telegramData)
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: ${telegramResponse.status} ${telegramData.description || ""}`,
      }
    }

    console.log("Course enrollment successful")
    return {
      success: true,
      message: "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
    }
  } catch (error) {
    console.error("Course enrollment error:", error)
    return {
      success: false,
      message: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: ${error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`,
    }
  }
}
