"use server"

import { z } from "zod"

// Form validation schema
const MasterclassFormSchema = z.object({
  city: z.string().min(2, { message: "–ì–æ—Ä–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞" }),
  fullName: z.string().min(2, { message: "–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞" }),
  phone: z.string().min(6, { message: "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" }),
  organization: z.string().min(2, { message: "–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞" }),
  position: z.string().min(2, { message: "–î–æ–ª–∂–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞" }),
  basisExperience: z.string().min(1, { message: "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤" }),
  basisOther: z.string().optional(),
})

// Telegram bot configuration
const TELEGRAM_BOT_TOKEN = "7587937962:AAGlFzrR-x2Fb4QEtIWB86mAPenZV7ffyEo"
const TELEGRAM_CHAT_ID = "-1002592531264"

export async function submitMasterclassEnrollment(formData: FormData) {
  console.log("Masterclass enrollment started")

  try {
    // Extract form data
    const data = {
      city: formData.get("city") as string,
      fullName: formData.get("fullName") as string,
      phone: formData.get("phone") as string,
      organization: formData.get("organization") as string,
      position: formData.get("position") as string,
      basisExperience: formData.get("basisExperience") as string,
      basisOther: formData.get("basisOther") as string,
    }

    console.log("Masterclass enrollment data:", data)

    // Validate form data
    const validatedData = MasterclassFormSchema.safeParse(data)

    if (!validatedData.success) {
      console.error("Validation error:", validatedData.error.flatten())
      return {
        success: false,
        message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã",
        errors: validatedData.error.flatten().fieldErrors,
      }
    }

    // Prepare basis experience text
    let basisExperienceText = data.basisExperience
    if (data.basisExperience === "other" && data.basisOther) {
      basisExperienceText = `–î—Ä—É–≥–æ–µ: ${data.basisOther}`
    }

    // Format message for Telegram
    const messageText = `
üéØ *–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å G-STUDIO*

üìÖ *–î–∞—Ç–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞*: 14 –ò—é–Ω—è, 2025 –≥., 16:00
üìç *–ê–¥—Ä–µ—Å*: —à. –ú—É–Ω—á–µ—à—Ç—å 147/1

üë§ *–£—á–∞—Å—Ç–Ω–∏–∫*:
‚Ä¢ *–ò–º—è*: ${data.fullName}
‚Ä¢ *–ì–æ—Ä–æ–¥*: ${data.city}
‚Ä¢ *–¢–µ–ª–µ—Ñ–æ–Ω*: ${data.phone}
‚Ä¢ *–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è*: ${data.organization}
‚Ä¢ *–î–æ–ª–∂–Ω–æ—Å—Ç—å*: ${data.position}
‚Ä¢ *–û–ø—ã—Ç —Å –ë–∞–∑–∏—Å –ú–µ–±–µ–ª—å—â–∏–∫*: ${basisExperienceText}

üìÖ *–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏*: ${new Date().toLocaleString("ru-RU")}
    `

    console.log("Sending to Telegram:", { chatId: TELEGRAM_CHAT_ID, messageLength: messageText.length })

    // Send message to Telegram
    const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`
    console.log("Telegram API URL:", telegramUrl)

    const telegramResponse = await fetch(telegramUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: messageText,
        parse_mode: "Markdown",
      }),
    })

    console.log("Telegram API response status:", telegramResponse.status)

    const telegramData = await telegramResponse.json()
    console.log("Telegram API response data:", telegramData)

    if (!telegramResponse.ok) {
      console.error("Telegram API error:", telegramData)
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: ${telegramResponse.status} ${telegramData.description || ""}`,
      }
    }

    console.log("Masterclass enrollment successful")
    return {
      success: true,
      message: "–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–∏—è –≤ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ.",
    }
  } catch (error) {
    console.error("Masterclass enrollment error:", error)
    return {
      success: false,
      message: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: ${error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`,
    }
  }
}
